function debounce(e,t=1e3){let a;return(...n)=>{clearTimeout(a),a=setTimeout((()=>{a=null,e.apply(null,n)}),t)}}function createAutoComplete({root:e,fetchData:t,renderOption:a,onOptionSelect:n,setInputValue:s}){e.innerHTML='\n        <label>\n            <span class="autocomplete__label">Search:</span>\n            <input type="text" class="autocomplete__input">\n        </label>\n        <div class="autocomplete__dropdown">\n            <div class="autocomplete__dropdown--menu">\n                <div class="autocomplete__dropdown--content autocomplete__results"></div>\n            </div>\n        </div>\n\n    ';const o=e.querySelector(".autocomplete__input"),l=e.querySelector(".autocomplete__dropdown"),r=e.querySelector(".autocomplete__results"),c=async e=>{const c=await t(e.target.value);if(console.dir(c),r.innerHTML="",c.length){l.classList.add("is-active");for(let e of c){let t=document.createElement("a");t.classList.add("autocomplete__dropdown-item"),t.innerHTML=a(e),t.addEventListener("click",(t=>{l.classList.remove("is-active"),o.value=s(e),n(e,t)})),r.appendChild(t)}}else l.classList.remove("is-active")};o.addEventListener("input",debounce(c,500)),o.addEventListener("submit",c),document.addEventListener("click",(t=>{e.contains(t.target)||l.classList.remove("is-active")})),o.addEventListener("focusin",(()=>{""!==r.innerHTML&&l.classList.add("is-active")}))}const baseURL="https://itunes.apple.com/",fetchSearchResults=async e=>{e.replace(/\s/g,"+");return(await axios.get(baseURL+"search",{params:{term:e,country:"us",limit:"10"}})).data.results},fetchSongData=async e=>(await axios.get(baseURL+"lookup",{params:{term:e}})).data,searchWidgets=document.querySelectorAll(".autocomplete");for(widget of searchWidgets)widget.parentElement.querySelector(".songSummary").classList.add("hidden"),createAutoComplete({root:widget,fetchData:fetchSearchResults,renderOption:e=>`\n                <div class="autocomplete__dropdown-item--image">\n                    <img src=${e.artworkUrl100}>\n                </div>\n                <div class="autocomplete__dropdown-item--content">\n                    <span class="title">${e.trackName}</span>\n                    <span class="subtitle">\n                        <a href="${e.artistViewUrl}" class="artist">${e.artistName}</a> - \n                        <a href="${e.collectionViewUrl}" class="album">${e.collectionName}</a>\n                    </span>\n                    </div>\n            `,onOptionSelect:(e,t)=>{if(t.target.classList.contains("artist")||t.target.classList.contains("album")){t.preventDefault();const e=widget.querySelector("input");e.value=t.target.innerText;let a=new Event("submit");e.dispatchEvent(a)}else onSongSelect(e,widget)},setInputValue:e=>e.trackName});const onSongSelect=(e,t)=>{const a=t.parentElement.querySelector(".songSummary");a.classList.remove("hidden"),a.innerHTML=songTemplate(e)},songTemplate=e=>{console.dir(e);const t=e.artworkUrl100,a=e.trackName,n=e.artistName,s=e.artistViewUrl,o=e.collectionName;return`\n        <div class="songSummary">\n            <img class="songSummary__image" src="${t}">\n            <div class="songSummary__contentBlock">\n                <h3 class="songSummary__title">${a}</h3>\n                <a class="songSummary__artist" href="${s}">${n}</a> : \n                <a class="songSummary__album" href="${e.collectionViewUrl}">${o}</a>\n                <div class="songSummary__preview">\n                    <audio class="songSummary__audio" src="${e.previewUrl}" controls>\n                        Your browser does not support the audio element.\n                    </audio>\n                </div>\n            </div>\n\n        </div>\n    `};